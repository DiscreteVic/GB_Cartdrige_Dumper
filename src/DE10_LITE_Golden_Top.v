// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
//`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
/*`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO*/
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire gba_cart_PHI;
reg gba_cart_WR;
reg gba_cart_RD;
reg gba_cart_CS;
reg [15:0]gba_cart_lowAdd;
reg [8:0]gba_cart_upAdd;
wire [15:0]gba_cart_romData;
wire [7:0]gba_cart_sramData;
reg gba_cart_CS2;
wire gba_cart_REQ;

assign GPIO[35] = gba_cart_PHI;
assign GPIO[34] = gba_cart_WR;
assign GPIO[33] = gba_cart_RD;
assign GPIO[32] = gba_cart_CS;
assign GPIO[15:0] = gba_cart_lowAdd; 
assign GPIO[23:16] = gba_cart_upAdd;
assign gba_cart_romData = GPIO[15:0]; 
assign gba_cart_sramData = GPIO[23:16];
assign GPIO[24] = gba_cart_CS2;
assign gba_cart_REQ = GPIO[25]; 







wire clk;
reg [3:0]digA;
reg [3:0]digB;

//=======================================================
//  Structural coding
//=======================================================

Prescaler #(.N(23)) pres(.clk_in(ADC_CLK_10), .clk_out(clk));
Prescaler #(.N(23)) presB(.clk_in(ADC_CLK_10), .clk_out(gba_cart_PHI));


SevSegController ssc0(.dig(digA),.dot(0),.leds(HEX0));
SevSegController ssc1(.dig(digB),.dot(0),.leds(HEX1));
SevSegController ssc2(.dig(gba_cart_lowAdd[3:0]),.dot(1),.leds(HEX2));
SevSegController ssc3(.dig(gba_cart_lowAdd[7:4]),.dot(1),.leds(HEX3));
SevSegController ssc4(.dig(gba_cart_lowAdd[11:8]),.dot(1),.leds(HEX4));
SevSegController ssc5(.dig(gba_cart_lowAdd[15:12]),.dot(1),.leds(HEX5));


initial gba_cart_WR = 1'b0;
initial gba_cart_RD = 1'b0;
initial gba_cart_CS = 1'b0;
initial gba_cart_lowAdd = 16'H0000;
initial gba_cart_upAdd = 8'HFF;
initial gba_cart_lowAdd = 1'b0;
initial gba_cart_upAdd = 1'b0 ;
initial gba_cart_CS2 = 1'b0;


always @(posedge(clk)) begin
/*
	gba_cart_WR <= 1'b1;
	gba_cart_CS2 <= 1'b1;
	gba_cart_upAdd <= gba_cart_lowAdd - 1;
*/

	gba_cart_RD <= 1'b1;
	gba_cart_CS2 <= 1'b1;

	gba_cart_lowAdd <= gba_cart_lowAdd + 1;

	digA <= gba_cart_sramData[3:0];
	digB <= gba_cart_sramData[7:4];

end

endmodule
